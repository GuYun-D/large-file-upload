import e from"spark-md5";import n from"axios";import{Message as t}from"element-ui";const s={CHUNK_SIZE:1048576},i=e=>{if(!(e instanceof File))return{status:0,data:"请传递文件类型"};let n=0;const t=s.CHUNK_SIZE,i=[],a=Math.ceil(e.size/t);for(;n<a;){const s=n*t,a=s+t>e.size?e.size:s+t;i.push({index:n,file:e.slice(s,a)}),n++}return{status:1,data:i}},a=n=>new Promise(((t,s)=>{const i=new e.ArrayBuffer;let a=0;const o=async e=>new Promise(((n,t)=>{const s=new FileReader;s.readAsArrayBuffer(e),s.onload=e=>{i.append(e.target.result),n()},s.onerror=function(e){t(e)},s.onabort=function(e){t(e)}})),r=async e=>{for(;a<n.length&&e.timeRemaining()>1;)if(await o(n[a].file),a++,a<n.length);else{const e=i.end();t(e)}window.requestIdleCallback(r)};window.requestIdleCallback(r)})),o=n.create({baseURL:"http://localhost:3000",timeout:5e5});o.interceptors.response.use((e=>{const n=e.data,{status:s,data:i,message:a}=n;if(s)return i;t.error(a)}));const r=e=>o.post("/checkFileExist",e),l=e=>o.post("/uploadfile",e),c=e=>o.post("/mergeFile",e);var d={data:()=>({hash:"",chunks:[]}),methods:{handleLoadFile(e){const n=e.file;n&&(this.file=n,this.uploadFile(this.file))},async uploadFile(e=this.file){const n=i(e);if(!n||!n.status)return void this.$message.error(n.data);this.chunks=n.data;const t=await a(this.chunks);this.hash=t;const s=await r({hash:t,ext:this.file.name.split(".").pop()}),{upload:o,uploadList:l}=s;if(o)return this.$message.success("上传成功");this.chunks=this.chunks.map(((e,n)=>{const s=t+"-"+n,i=!!l.includes(s);return{hash:t,index:n,name:s,chunk:e.file,progress:i?100:0}})),this.uploadChunks(l)},async uploadChunks(e){const n=this.chunks.filter((n=>!e.includes(n.name))).map((e=>{const n=new FormData;return n.append("chunk",e.chunk),n.append("hash",e.hash),n.append("name",e.name),{form:n,index:e.index,error:0}}));await((e=1,t=[])=>{let s=0,i=!1;const a=n.length;return new Promise(((t,o)=>{const r=()=>{if(i)return;const e=n.shift();if(!e)return;const{form:c}=e;l(c).then((()=>{s>=a-1?t():(s++,r())})).catch((()=>{e.error<3?(e.error++,n.unshift(e),r()):(i=!0,o(new Error("切片上传失败")))}))};for(;e>0;)r(),e--}))})(3),this.mergeFileSlices()},async mergeFileSlices(){await c({ext:this.file.name.split(".").pop(),size:s.CHUNK_SIZE,hash:this.hash}),this.$message.success("文件上传成功")}}};function u(e,n,t,s,i,a,o,r,l,c){"boolean"!=typeof o&&(l=r,r=o,o=!1);const d="function"==typeof t?t.options:t;let u;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),s&&(d._scopeId=s),a?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,l(e)),e&&e._registeredComponents&&e._registeredComponents.add(a)},d._ssrRegister=u):n&&(u=o?function(e){n.call(this,c(e,this.$root.$options.shadowRoot))}:function(e){n.call(this,r(e))}),u)if(d.functional){const e=d.render;d.render=function(n,t){return u.call(t),e(n,t)}}else{const e=d.beforeCreate;d.beforeCreate=e?[].concat(e,u):[u]}return t}const h="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function p(e){return(e,n)=>function(e,n){const t=h?n.media||"default":e,s=m[t]||(m[t]={ids:new Set,styles:[]});if(!s.ids.has(e)){s.ids.add(e);let t=n.source;if(n.map&&(t+="\n/*# sourceURL="+n.map.sources[0]+" */",t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n.map))))+" */"),s.element||(s.element=document.createElement("style"),s.element.type="text/css",n.media&&s.element.setAttribute("media",n.media),void 0===f&&(f=document.head||document.getElementsByTagName("head")[0]),f.appendChild(s.element)),"styleSheet"in s.element)s.styles.push(t),s.element.styleSheet.cssText=s.styles.filter(Boolean).join("\n");else{const e=s.ids.size-1,n=document.createTextNode(t),i=s.element.childNodes;i[e]&&s.element.removeChild(i[e]),i.length?s.element.insertBefore(n,i[e]):s.element.appendChild(n)}}}(e,n)}let f;const m={};const A=d;var g=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("el-upload",{ref:"file",staticClass:"avatar-uploader",attrs:{"http-request":e.handleLoadFile,action:"#","show-file-list":!1}},[e._t("default",(function(){return[t("div",{staticClass:"uploader"},[t("i",{staticClass:"el-icon-upload"}),e._v(" "),t("div",{staticClass:"tip"},[e._v("点击上传文件")])])]}))],2)],1)};g._withStripped=!0;const C=u({render:g,staticRenderFns:[]},(function(e){e&&e("data-v-46e87a49_0",{source:"\n.uploader {\n  width: 300px;\n  height: 100px;\n  border: 1px dotted #ccc;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #ccc;\n  border-radius: 5px;\n  transition: all 350ms;\n&:hover {\n    color: #409eff;\n    border-color: #409eff;\n}\n.el-icon-upload {\n    font-size: 36px;\n}\n.tip {\n    margin-left: 5px;\n}\n}\n",map:{version:3,sources:["E:\\front_end-project\\my-project\\my-test\\client\\src\\packages\\components\\LargeFileUpload.vue"],names:[],mappings:";AA0IA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,WAAA;EACA,kBAAA;EACA,qBAAA;AAEA;IACA,cAAA;IACA,qBAAA;AACA;AAEA;IACA,eAAA;AACA;AAEA;IACA,gBAAA;AACA;AACA",file:"LargeFileUpload.vue",sourcesContent:["<template>\n  <div>\n    <el-upload ref=\"file\" :http-request=\"handleLoadFile\" action=\"#\" class=\"avatar-uploader\" :show-file-list='false'>\n      <slot>\n        <div class=\"uploader\">\n          <i class=\"el-icon-upload\"></i>\n          <div class=\"tip\">点击上传文件</div>\n        </div>\n      </slot>\n    </el-upload>\n  </div>\n</template>\n\n<script>\nimport { checkFile, upaloadFileApi, mergeFileSlicesApi } from '../api/index'\nimport { createChunk, calcSliceHash } from '../utils/index'\nimport { largeFileUploadConfig } from '../config/index'\n\nexport default {\n  data() {\n    return {\n      hash: '',\n      chunks: []\n    }\n  },\n  methods: {\n    handleLoadFile(e) {\n      const file = e.file\n      if (!file) {\n        return\n      }\n      this.file = file\n      this.uploadFile(this.file)\n    },\n\n    async uploadFile(file = this.file) {\n      const chunkObj = createChunk(file)\n      if (!chunkObj || !chunkObj.status) {\n        this.$message.error(chunkObj.data)\n        return\n      }\n      this.chunks = chunkObj.data\n      const hash = await calcSliceHash(this.chunks) // 即使是修改了文件名hash值也不会发生变化，除非是修改文件内容\n\n      this.hash = hash\n      const res = await checkFile({\n        hash,\n        ext: this.file.name.split('.').pop()\n      })\n\n      const { upload, uploadList } = res\n      if (upload) {\n        return this.$message.success(\"上传成功\")\n      }\n\n\n      this.chunks = this.chunks.map((item, index) => {\n        const sliceName = hash + '-' + index\n        const isChunkUploaded = !!uploadList.includes(sliceName)\n\n        return {\n          hash,\n          index,\n          name: sliceName,\n          chunk: item.file,\n          progress: isChunkUploaded ? 100 : 0\n        }\n      })\n      this.uploadChunks(uploadList)\n\n    },\n\n    async uploadChunks(uploadList) {\n      const requests = this.chunks.filter(chunk => !uploadList.includes(chunk.name)).map(chunk => {\n        const form = new FormData()\n        form.append('chunk', chunk.chunk)\n        form.append('hash', chunk.hash)\n        form.append('name', chunk.name)\n        return { form, index: chunk.index, error: 0 }\n      })\n\n      const sendRequest = (limit = 1, task = []) => {\n        let count = 0 // 用于记录请求成功次数\n        let isStop = false // 标记切片上传错误情况，如果 >= 3 次 直接停止\n        const allTackLength = requests.length\n        return new Promise((resolve, reject) => {\n          const uploadReq = () => {\n            if (isStop) return\n            const requestItem = requests.shift()\n            if (!requestItem) return\n            const { form } = requestItem\n\n            upaloadFileApi(form).then(() => {\n              // 最后一个切片上传成功才算成功\n              if (count >= allTackLength - 1) {\n                resolve()\n              } else {\n                count++\n                uploadReq()\n              }\n            }).catch(() => {\n              if (requestItem.error < 3) {\n                requestItem.error++\n                requests.unshift(requestItem)\n                uploadReq()\n              } else {\n                isStop = true\n                reject(new Error(\"切片上传失败\"))\n              }\n            })\n          }\n\n          while (limit > 0) {\n            uploadReq()\n            limit--\n          }\n        })\n      }\n\n      await sendRequest(3)\n      // this.$message.success(\"切片上传成功\")\n      this.mergeFileSlices()\n    },\n\n    async mergeFileSlices() {\n      const res = await mergeFileSlicesApi({\n        ext: this.file.name.split('.').pop(),\n        size: largeFileUploadConfig.CHUNK_SIZE,\n        hash: this.hash,\n      })\n\n      this.$message.success(\"文件上传成功\")\n    }\n  }\n}\n<\/script>\n\n<style>\n.uploader {\n  width: 300px;\n  height: 100px;\n  border: 1px dotted #ccc;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #ccc;\n  border-radius: 5px;\n  transition: all 350ms;\n\n  &:hover {\n    color: #409eff;\n    border-color: #409eff;\n  }\n\n  .el-icon-upload {\n    font-size: 36px;\n  }\n\n  .tip {\n    margin-left: 5px;\n  }\n}\n</style>"]},media:void 0})}),A,undefined,false,undefined,!1,p,void 0,void 0);export{C as BeeLargrFileUpload,a as calcSliceHash,r as checkFile,i as createChunk,s as largeFileUploadConfig,c as mergeFileSlicesApi,o as request,l as upaloadFileApi};
